/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx = 0; /* border pixel of windows */
static const unsigned int snap = 64;    /* snap pixel */
static const int rmaster =
    0; /* 1 means master-area is initially on the right */
static const unsigned int gappih = 20; /* horiz inner gap between windows */
static const unsigned int gappiv = 10; /* vert inner gap between windows */
static const unsigned int gappoh =
    30; /* horiz outer gap between windows and screen edge */
static const unsigned int gappov =
    30; /* vert outer gap between windows and screen edge */
static int smartgaps =
    0; /* 1 means no outer gap when there is only one window */
static const int showbar = 1;               /* 0 means no bar */
static const int topbar = 0;                /* 0 means bottom bar */
static const int usealtbar = 1;             /* 1 means use non-dwm status bar */
static const char *altbarclass = "Polybar"; /* Alternate bar class name */
static const char *alttrayname = "snixembed"; /* Polybar tray instance name */
static const char *altbarcmd =
    "$HOME/.dwm/src/bar.sh"; /* Alternate bar launch command */
static const char *fonts[] = {"monospace:size=10"};
static const char dmenufont[] = "monospace:size=10";
static const char col_gray1[] = "#222222";
static const char col_gray2[] = "#444444";
static const char col_gray3[] = "#bbbbbb";
static const char col_gray4[] = "#eeeeee";
static const char col_cyan[] = "#005577";
static const char *colors[][3] = {
    /*               fg         bg         border   */
    [SchemeNorm] = {col_gray3, col_gray1, col_gray2},
    [SchemeSel] = {col_gray4, col_cyan, col_cyan},
};

/* tagging */
static const char *tags[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9"};

static const Rule rules[] = {
    /* xprop(1):
     *	WM_CLASS(STRING) = instance, class
     *	WM_NAME(STRING) = title
     */
    /* class      instance    title       tags mask     isfloating   monitor */
    {"Gimp", NULL, NULL, 0, 1, -1},
    {NULL, NULL},
    {"Firefox", NULL, NULL, 1 << 8, 0, -1},
};

/* layout(s) */
static const float mfact = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster = 1;    /* number of clients in master area */
static const int resizehints =
    1; /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen =
    1; /* 1 will force focus on the fullscreen window */

#define FORCE_VSPLIT                                                           \
  1 /* nrowgrid layout: force two clients to always split vertically */
#include "vanitygaps.c"

static const Layout layouts[] = {
    /* symbol     arrange function */
    {"[]=", tile}, /* first entry is default */
    {"[M]", monocle},
    {"[@]", spiral},
    {"[\\]", dwindle},
    {"H[]", deck},
    {"TTT", bstack},
    {"===", bstackhoriz},
    {"HHH", grid},
    {"###", nrowgrid},
    {"---", horizgrid},
    {":::", gaplessgrid},
    {"|M|", centeredmaster},
    {">M>", centeredfloatingmaster},
    {"><>", NULL}, /* no layout function means floating behavior */
    {NULL, NULL},
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY, TAG)                                                      \
  {MODKEY, KEY, view, {.ui = 1 << TAG}},                                       \
      {MODKEY | ControlMask, KEY, toggleview, {.ui = 1 << TAG}},               \
      {MODKEY | ShiftMask, KEY, tag, {.ui = 1 << TAG}},                        \
      {MODKEY | ControlMask | ShiftMask, KEY, toggletag, {.ui = 1 << TAG}},

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd)                                                             \
  {                                                                            \
    .v = (const char *[]) { "/bin/sh", "-c", cmd, NULL }                       \
  }

/* commands */
static char dmenumon[2] =
    "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = {
    "dmenu_run", "-m",      dmenumon, "-fn",    dmenufont, "-nb",     col_gray1,
    "-nf",       col_gray3, "-sb",    col_cyan, "-sf",     col_gray4, NULL};
static const char *termcmd[] = {"kitty", NULL};
static const char *wallpaper_safe[] = {"/home/_3hy/.dwm/src/wal.sh",
                                       "--exclude-hidden", NULL};
static const char *wallpaper[] = {"/home/_3hy/.dwm/src/wal.sh",
                                  "--include-hidden", NULL};
static const char *screenshot[] = {"/home/_3hy/.dwm/src/screenshot.sh", NULL};
static const char *forcequit[] = {"/home/_3hy/.dwm/src/forcequit.sh", NULL};

static const Key keys[] = {
    {MODKEY, XK_r, spawn, {.v = dmenucmd}},     // launcher
    {MODKEY, XK_Return, spawn, {.v = termcmd}}, // terminal
    {MODKEY | ShiftMask, XK_r, togglermaster, {0}},
    {MODKEY, XK_t, spawn, {.v = wallpaper_safe}},        // wallpaper safe
    {MODKEY | ShiftMask, XK_t, spawn, {.v = wallpaper}}, // wallpaper universal
    {MODKEY, XK_b, togglebar, {0}},                      // toggle bar
    {MODKEY, XK_j, focusstack, {.i = +1}}, // cycle focus clockwise
    {MODKEY, XK_k, focusstack, {.i = -1}}, // cycle focus counter-clockwise
    {MODKEY, XK_i, incnmaster, {.i = +1}}, // not sure
    {MODKEY, XK_d, incnmaster, {.i = -1}}, // not sure

    {MODKEY, XK_0, view, {.ui = ~0}},                    // show all windows
    {MODKEY, XK_h, setmfact, {.f = -0.05}},              // resize window left
    {MODKEY, XK_l, setmfact, {.f = +0.05}},              // resize window right
    {MODKEY, XK_Tab, view, {0}},                         // go to last workspace
    {MODKEY, XK_q, killclient, {0}},                     // kill focused window
    {MODKEY, XK_space, setlayout, {0}},                  // remove gaps
    {MODKEY | ShiftMask, XK_space, togglefloating, {0}}, // toggle floating
    {MODKEY | ShiftMask, XK_q, spawn, {.v = forcequit}}, // forcefull kill
    {MODKEY | ShiftMask, XK_0, tag, {.ui = ~0}},         // always on top
    {MODKEY | ShiftMask, XK_h, setcfact, {.f = +0.25}},  // resize window up
    {MODKEY | ShiftMask, XK_l, setcfact, {.f = -0.25}},  // resize window down
    {MODKEY | ShiftMask, XK_o, setcfact, {.f = 0.00}},   // not sure

    {MODKEY | ShiftMask | ControlMask, XK_1, setlayout, {.v = &layouts[0]}},
    {MODKEY | ShiftMask | ControlMask, XK_2, setlayout, {.v = &layouts[1]}},
    {MODKEY | ShiftMask | ControlMask, XK_3, setlayout, {.v = &layouts[2]}},
    {MODKEY | ShiftMask | ControlMask, XK_4, setlayout, {.v = &layouts[3]}},
    {MODKEY | ShiftMask | ControlMask, XK_5, setlayout, {.v = &layouts[4]}},
    {MODKEY | ShiftMask | ControlMask, XK_6, setlayout, {.v = &layouts[5]}},
    {MODKEY | ShiftMask | ControlMask, XK_7, setlayout, {.v = &layouts[6]}},
    {MODKEY | ShiftMask | ControlMask, XK_8, setlayout, {.v = &layouts[7]}},
    {MODKEY | ShiftMask | ControlMask, XK_9, setlayout, {.v = &layouts[8]}},
    {MODKEY | ShiftMask | ControlMask, XK_0, setlayout, {.v = &layouts[9]}},
    {MODKEY | ControlMask, XK_comma, cyclelayout, {.i = -1}},
    {MODKEY | ControlMask, XK_period, cyclelayout, {.i = +1}},

    TAGKEYS(XK_1, 0) TAGKEYS(XK_2, 1) TAGKEYS(XK_3, 2) TAGKEYS(XK_4, 3)
        TAGKEYS(XK_5, 4) TAGKEYS(XK_6, 5) TAGKEYS(XK_7, 6) TAGKEYS(XK_8, 7)
            TAGKEYS(XK_9, 8){MODKEY | ShiftMask, XK_q, quit, {0}},
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
 * ClkClientWin, or ClkRootWin */
static const Button buttons[] = {
    /* click                event mask      button          function argument */
    {ClkLtSymbol, 0, Button1, setlayout, {0}},
    {ClkLtSymbol, 0, Button3, setlayout, {.v = &layouts[2]}},
    {ClkWinTitle, 0, Button2, zoom, {0}},
    {ClkStatusText, 0, Button2, spawn, {.v = termcmd}},
    {ClkClientWin, MODKEY, Button1, movemouse, {0}},
    {ClkClientWin, MODKEY, Button2, togglefloating, {0}},
    {ClkClientWin, MODKEY, Button3, resizemouse, {0}},
    {ClkTagBar, 0, Button1, view, {0}},
    {ClkTagBar, 0, Button3, toggleview, {0}},
    {ClkTagBar, MODKEY, Button1, tag, {0}},
    {ClkTagBar, MODKEY, Button3, toggletag, {0}},
};

static const char *ipcsockpath = "/tmp/dwm.sock";
static IPCCommand ipccommands[] = {
    IPCCOMMAND(view, 1, {ARG_TYPE_UINT}),
    IPCCOMMAND(toggleview, 1, {ARG_TYPE_UINT}),
    IPCCOMMAND(tag, 1, {ARG_TYPE_UINT}),
    IPCCOMMAND(toggletag, 1, {ARG_TYPE_UINT}),
    IPCCOMMAND(tagmon, 1, {ARG_TYPE_UINT}),
    IPCCOMMAND(focusmon, 1, {ARG_TYPE_SINT}),
    IPCCOMMAND(focusstack, 1, {ARG_TYPE_SINT}),
    IPCCOMMAND(zoom, 1, {ARG_TYPE_NONE}),
    IPCCOMMAND(incnmaster, 1, {ARG_TYPE_SINT}),
    IPCCOMMAND(killclient, 1, {ARG_TYPE_SINT}),
    IPCCOMMAND(togglefloating, 1, {ARG_TYPE_NONE}),
    IPCCOMMAND(setmfact, 1, {ARG_TYPE_FLOAT}),
    IPCCOMMAND(setlayoutsafe, 1, {ARG_TYPE_PTR}),
    IPCCOMMAND(quit, 1, {ARG_TYPE_NONE})};
